#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
"""
import psycopg2
import pandas as pd
from datetime import datetime

def check_analytics_results():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π"""
    
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        conn = psycopg2.connect(
            host="project-postgres",
            database="crypto_db",
            user="crypto_user",
            password="crypto_pass",
            port=5432
        )
        
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...")
        print("="*60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Å—Ö–µ–º
        cursor = conn.cursor()
        cursor.execute("""
            SELECT schema_name 
            FROM information_schema.schemata 
            WHERE schema_name IN ('staging', 'marts')
            ORDER BY schema_name
        """)
        
        schemas = cursor.fetchall()
        print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ö–µ–º: {len(schemas)}")
        for schema in schemas:
            print(f"   - {schema[0]}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å/–≤'—é
        cursor.execute("""
            SELECT table_schema, table_name, table_type
            FROM information_schema.tables 
            WHERE table_schema IN ('staging', 'marts', 'public')
            AND table_name LIKE '%crypto%'
            ORDER BY table_schema, table_name
        """)
        
        tables = cursor.fetchall()
        print(f"\nüìã –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å/–≤'—é –∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏: {len(tables)}")
        for schema, table, table_type in tables:
            print(f"   - {schema}.{table} ({table_type})")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–∂–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
        analytics_tables = [
            ('public', 'crypto_prices'),
            ('staging', 'stg_crypto_prices'),
            ('marts', 'crypto_daily_metrics'),
            ('marts', 'crypto_top_performers')
        ]
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü—è—Ö:")
        for schema, table in analytics_tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {schema}.{table}")
                count = cursor.fetchone()[0]
                print(f"   - {schema}.{table}: {count:,} –∑–∞–ø–∏—Å—ñ–≤")
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –¥–µ—è–∫–∏—Ö —Ç–∞–±–ª–∏—Ü—å
                if table == 'crypto_daily_metrics':
                    cursor.execute(f"""
                        SELECT 
                            COUNT(DISTINCT coin_id) as unique_coins,
                            COUNT(DISTINCT extract_date) as unique_dates,
                            MIN(extract_date) as first_date,
                            MAX(extract_date) as last_date
                        FROM {schema}.{table}
                    """)
                    stats = cursor.fetchone()
                    if stats:
                        unique_coins, unique_dates, first_date, last_date = stats
                        print(f"     ‚îî‚îÄ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º–æ–Ω–µ—Ç: {unique_coins}")
                        print(f"     ‚îî‚îÄ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –¥–∞—Ç: {unique_dates}")
                        print(f"     ‚îî‚îÄ –ü–µ—Ä—ñ–æ–¥: {first_date} - {last_date}")
                
                elif table == 'crypto_top_performers':
                    cursor.execute(f"""
                        SELECT category, COUNT(*) as count
                        FROM {schema}.{table}
                        GROUP BY category
                        ORDER BY category
                    """)
                    categories = cursor.fetchall()
                    for cat, cnt in categories:
                        print(f"     ‚îî‚îÄ {cat}: {cnt}")
                        
            except Exception as e:
                print(f"   - {schema}.{table}: ‚ùå –ü–æ–º–∏–ª–∫–∞ ({str(e)[:50]}...)")
        
        # –¢–æ–ø 5 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∏–Ω–∫–æ–≤–æ—é –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é
        try:
            print("\nüèÜ –¢–æ–ø 5 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∏–Ω–∫–æ–≤–æ—é –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é:")
            cursor.execute("""
                SELECT 
                    name,
                    symbol,
                    current_price,
                    market_cap,
                    market_cap_rank,
                    price_change_percentage_24h
                FROM marts.crypto_daily_metrics
                WHERE extract_date = (SELECT MAX(extract_date) FROM marts.crypto_daily_metrics)
                ORDER BY market_cap_rank
                LIMIT 5
            """)
            
            top_coins = cursor.fetchall()
            for coin in top_coins:
                name, symbol, price, mcap, rank, change = coin
                change_str = f"{change:+.2f}%" if change else "N/A"
                print(f"   {rank}. {name} ({symbol})")
                print(f"      üí∞ –¶—ñ–Ω–∞: ${price:,.2f}")
                print(f"      üìä –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: ${mcap:,}")
                print(f"      üìà –ó–º—ñ–Ω–∞ 24–≥: {change_str}")
                print()
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø –º–æ–Ω–µ—Ç–∏: {e}")
        
        # –ù–∞–π–±—ñ–ª—å—à—ñ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —Ç–∞ –ø–∞–¥—ñ–Ω–Ω—è
        try:
            print("üìà –ù–∞–π–±—ñ–ª—å—à—ñ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –∑–∞ 24 –≥–æ–¥–∏–Ω–∏:")
            cursor.execute("""
                SELECT name, symbol, price_change_percentage_24h
                FROM marts.crypto_daily_metrics
                WHERE extract_date = (SELECT MAX(extract_date) FROM marts.crypto_daily_metrics)
                AND price_change_percentage_24h IS NOT NULL
                ORDER BY price_change_percentage_24h DESC
                LIMIT 3
            """)
            
            gainers = cursor.fetchall()
            for name, symbol, change in gainers:
                print(f"   üöÄ {name} ({symbol}): +{change:.2f}%")
            
            print("\nüìâ –ù–∞–π–±—ñ–ª—å—à—ñ –ø–∞–¥—ñ–Ω–Ω—è –∑–∞ 24 –≥–æ–¥–∏–Ω–∏:")
            cursor.execute("""
                SELECT name, symbol, price_change_percentage_24h
                FROM marts.crypto_daily_metrics
                WHERE extract_date = (SELECT MAX(extract_date) FROM marts.crypto_daily_metrics)
                AND price_change_percentage_24h IS NOT NULL
                ORDER BY price_change_percentage_24h ASC
                LIMIT 3
            """)
            
            losers = cursor.fetchall()
            for name, symbol, change in losers:
                print(f"   üìâ {name} ({symbol}): {change:.2f}%")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        try:
            print("\nüè∑Ô∏è –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ä–∏–Ω–∫–æ–≤–æ—ó –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó:")
            cursor.execute("""
                SELECT 
                    market_cap_category,
                    COUNT(*) as count,
                    AVG(current_price) as avg_price
                FROM marts.crypto_daily_metrics
                WHERE extract_date = (SELECT MAX(extract_date) FROM marts.crypto_daily_metrics)
                GROUP BY market_cap_category
                ORDER BY 
                    CASE market_cap_category
                        WHEN 'Large Cap' THEN 1
                        WHEN 'Mid Cap' THEN 2
                        WHEN 'Small Cap' THEN 3
                        WHEN 'Micro Cap' THEN 4
                    END
            """)
            
            categories = cursor.fetchall()
            for cat, count, avg_price in categories:
                avg_price_str = f"${avg_price:,.2f}" if avg_price else "N/A"
                print(f"   üìä {cat}: {count} –º–æ–Ω–µ—Ç (—Å–µ—Ä. —Ü—ñ–Ω–∞: {avg_price_str})")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {e}")
        
        cursor.close()
        conn.close()
        
        print("\n" + "="*60)
        print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    check_analytics_results()