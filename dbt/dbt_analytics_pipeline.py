"""
DAG –¥–ª—è –∑–∞–ø—É—Å–∫—É dbt –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""
from datetime import datetime, timedelta
import subprocess
import os
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.bash import BashOperator

# Default arguments
default_args = {
    'owner': 'data-engineer',
    'depends_on_past': False,
    'start_date': datetime(2025, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# DAG definition
dag = DAG(
    'dbt_analytics_pipeline',
    default_args=default_args,
    description='dbt pipeline –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö',
    schedule_interval=timedelta(hours=6),  # –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
    catchup=False,
    tags=['dbt', 'analytics', 'crypto'],
)

def setup_dbt_environment():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è dbt —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    print("üîß –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ dbt —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ...")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è dbt —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    try:
        subprocess.run(['dbt', '--version'], check=True, capture_output=True)
        print("‚úÖ dbt –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ dbt...")
        subprocess.run(['pip', 'install', 'dbt-postgres'], check=True)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    dbt_dir = '/opt/airflow/dbt'
    os.chdir(dbt_dir)
    
    print(f"üìÅ –ü—Ä–∞—Ü—é—î–º–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {os.getcwd()}")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
    os.environ['DBT_PROFILES_DIR'] = dbt_dir
    
    return "dbt —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ"

def run_dbt_debug():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è dbt –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è dbt...")
    
    os.chdir('/opt/airflow/dbt')
    os.environ['DBT_PROFILES_DIR'] = '/opt/airflow/dbt'
    
    try:
        result = subprocess.run(
            ['dbt', 'debug'], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print("‚úÖ dbt debug –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ:")
        print(result.stdout)
        return "dbt –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î"
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå dbt debug failed: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        raise

def run_dbt_deps():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è dbt –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ dbt –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ...")
    
    os.chdir('/opt/airflow/dbt')
    os.environ['DBT_PROFILES_DIR'] = '/opt/airflow/dbt'
    
    try:
        result = subprocess.run(
            ['dbt', 'deps'], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print("‚úÖ dbt deps –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(result.stdout)
        return "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå dbt deps failed: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        # –ù–µ –ø–∞–¥–∞—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
        return "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ"

def run_dbt_staging_models():
    """–ó–∞–ø—É—Å–∫ staging –º–æ–¥–µ–ª–µ–π dbt"""
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ staging –º–æ–¥–µ–ª—ñ...")
    
    os.chdir('/opt/airflow/dbt')
    os.environ['DBT_PROFILES_DIR'] = '/opt/airflow/dbt'
    
    try:
        result = subprocess.run(
            ['dbt', 'run', '--models', 'staging'], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print("‚úÖ Staging –º–æ–¥–µ–ª—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ:")
        print(result.stdout)
        return "Staging –º–æ–¥–µ–ª—ñ –≥–æ—Ç–æ–≤—ñ"
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå dbt staging models failed: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        raise

def run_dbt_mart_models():
    """–ó–∞–ø—É—Å–∫ mart –º–æ–¥–µ–ª–µ–π dbt"""
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ mart –º–æ–¥–µ–ª—ñ...")
    
    os.chdir('/opt/airflow/dbt')
    os.environ['DBT_PROFILES_DIR'] = '/opt/airflow/dbt'
    
    try:
        result = subprocess.run(
            ['dbt', 'run', '--models', 'marts'], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print("‚úÖ Mart –º–æ–¥–µ–ª—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ:")
        print(result.stdout)
        return "Mart –º–æ–¥–µ–ª—ñ –≥–æ—Ç–æ–≤—ñ"
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå dbt mart models failed: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        raise

def run_dbt_tests():
    """–ó–∞–ø—É—Å–∫ dbt —Ç–µ—Å—Ç—ñ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫–∞—î–º–æ dbt —Ç–µ—Å—Ç–∏...")
    
    os.chdir('/opt/airflow/dbt')
    os.environ['DBT_PROFILES_DIR'] = '/opt/airflow/dbt'
    
    try:
        result = subprocess.run(
            ['dbt', 'test'], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print("‚úÖ dbt —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏:")
        print(result.stdout)
        return "–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏"
        
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –î–µ—è–∫—ñ dbt —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        # –ù–µ –ø–∞–¥–∞—î–º–æ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —Ç–µ—Å—Ç—ñ–≤, —Ç—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–∂—É—î–º–æ
        return "–¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏"

def generate_dbt_docs():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è dbt –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó"""
    print("üìö –ì–µ–Ω–µ—Ä—É—î–º–æ dbt –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é...")
    
    os.chdir('/opt/airflow/dbt')
    os.environ['DBT_PROFILES_DIR'] = '/opt/airflow/dbt'
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
        result = subprocess.run(
            ['dbt', 'docs', 'generate'], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print("‚úÖ dbt –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞:")
        print(result.stdout)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
        docs_dir = '/opt/airflow/dbt/target'
        if os.path.exists(f"{docs_dir}/index.html"):
            print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤: {docs_dir}/index.html")
        
        return "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞"
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå dbt docs generation failed: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        return "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞"

def analytics_summary():
    """–ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    print("üìä –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç...")
    
    import psycopg2
    
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
        conn = psycopg2.connect(
            host="project-postgres",
            database="crypto_db",
            user="crypto_user",
            password="crypto_pass",
            port=5432
        )
        cursor = conn.cursor()
        
        print("="*60)
        print("üìà –ó–í–Ü–¢ –ê–ù–ê–õ–Ü–¢–ò–ö–ò –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢")
        print("="*60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'marts' 
            ORDER BY table_name
        """)
        
        tables = cursor.fetchall()
        print(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")
        for table in tables:
            print(f"   - {table[0]}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–ø –≤–∏–∫–æ–Ω–∞–≤—Ü—è—Ö
        try:
            cursor.execute("""
                SELECT category, COUNT(*) as count
                FROM marts.crypto_top_performers 
                GROUP BY category
                ORDER BY category
            """)
            
            categories = cursor.fetchall()
            print(f"\nüèÜ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–ø –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤:")
            for cat, count in categories:
                print(f"   - {cat}: {count} –º–æ–Ω–µ—Ç")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è —Ç–æ–ø –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–Ω–Ω–∏–º –º–µ—Ç—Ä–∏–∫–∞–º
        try:
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_coins,
                    COUNT(DISTINCT extract_date) as days_of_data,
                    AVG(current_price) as avg_price
                FROM marts.crypto_daily_metrics
            """)
            
            stats = cursor.fetchone()
            if stats:
                total, days, avg_price = stats
                print(f"\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   - –ó–∞–≥–∞–ª–æ–º –º–æ–Ω–µ—Ç: {total}")
                print(f"   - –î–Ω—ñ–≤ –¥–∞–Ω–∏—Ö: {days}")
                print(f"   - –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: ${avg_price:,.2f}" if avg_price else "   - –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: N/A")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è –¥–µ–Ω–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞: {e}")
        
        cursor.close()
        conn.close()
        
        print("="*60)
        print("‚úÖ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        return "–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –∑–≤—ñ—Ç –≥–æ—Ç–æ–≤–∏–π"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {e}")
        return "–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏"

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–¥–∞—á
start_task = BashOperator(
    task_id='start_dbt_pipeline',
    bash_command='echo "üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ dbt Analytics Pipeline..."',
    dag=dag,
)

setup_task = PythonOperator(
    task_id='setup_dbt_environment',
    python_callable=setup_dbt_environment,
    dag=dag,
)

debug_task = PythonOperator(
    task_id='dbt_debug',
    python_callable=run_dbt_debug,
    dag=dag,
)

deps_task = PythonOperator(
    task_id='dbt_deps',
    python_callable=run_dbt_deps,
    dag=dag,
)

staging_task = PythonOperator(
    task_id='dbt_staging_models',
    python_callable=run_dbt_staging_models,
    dag=dag,
)

marts_task = PythonOperator(
    task_id='dbt_mart_models',
    python_callable=run_dbt_mart_models,
    dag=dag,
)

test_task = PythonOperator(
    task_id='dbt_tests',
    python_callable=run_dbt_tests,
    dag=dag,
)

docs_task = PythonOperator(
    task_id='generate_dbt_docs',
    python_callable=generate_dbt_docs,
    dag=dag,
)

summary_task = PythonOperator(
    task_id='analytics_summary',
    python_callable=analytics_summary,
    dag=dag,
)

end_task = BashOperator(
    task_id='end_dbt_pipeline',
    bash_command='echo "‚úÖ dbt Analytics Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"',
    dag=dag,
)

# –ü–æ—Ä—è–¥–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á
start_task >> setup_task >> debug_task >> deps_task >> staging_task >> marts_task >> [test_task, docs_task] >> summary_task >> end_task